import * as lib from '../lib';

const libKeys = Object.keys(lib);

const methods = [
  'any',
  'anyDate',
  'anyNumber',
  'array',
  'asAnyDate',
  'asDate',
  'asString',
  'assertType',
  'bigint',
  'boolean',
  'convertToAnyDate',
  'convertToDate',
  'convertToString',
  'date',
  'func',
  'getAny',
  'getAnyNumber',
  'getArrayOf',
  'getBigInt',
  'getBoolean',
  'getInstanceOf',
  'getIntersectionOf',
  'getLiteral',
  'getLiteralOf',
  'getNull',
  'getNullable',
  'getNumber',
  'getObjectOf',
  'getStrictObjectOf',
  'getString',
  'getSymbol',
  'getTupleOf',
  'getType',
  'getUnionOf',
  'instance',
  'intersection',
  'isAny',
  'isAnyDate',
  'isAnyNumber',
  'isArrayOf',
  'isBigInt',
  'isBoolean',
  'isDate',
  'isFunction',
  'isInstanceOf',
  'isIntersectionOf',
  'isKeyOf',
  'isLiteral',
  'isLiteralOf',
  'isNever',
  'isNull',
  'isNullable',
  'isNullish',
  'isNumber',
  'isObjectOf',
  'isOmitFrom',
  'isOptional',
  'isOptionalUndefined',
  'isPartial',
  'isPartialUndefined',
  'isPickFrom',
  'isRecordOf',
  'isRequired',
  'isStrictObjectOf',
  'isString',
  'isSymbol',
  'isTemplateLiteralOf',
  'isTupleOf',
  'isTupleRestOf',
  'isUndefined',
  'isUnionOf',
  'keyof',
  'literal',
  'literals',
  'never',
  'nullable',
  'nulled',
  'nullish',
  'number',
  'object',
  'optional',
  'optionalUndef',
  'omit',
  'parseAny',
  'parseAnyNumber',
  'parseArrayOf',
  'parseBigInt',
  'parseBoolean',
  'parseInstanceOf',
  'parseIntersectionOf',
  'parseLiteral',
  'parseLiteralOf',
  'parseNull',
  'parseNullable',
  'parseNumber',
  'parseObjectOf',
  'parseStrictObjectOf',
  'parseString',
  'parseSymbol',
  'parseTupleOf',
  'parseType',
  'parseUnionOf',
  'partial',
  'partialUndef',
  'pick',
  'record',
  'required',
  'same',
  'setSame',
  'strictObject',
  'string',
  'symbol',
  'templateLiteral',
  'tuple',
  'tupleRest',
  'undef',
  'union',
];

test('rAssign lib exports', () => {
  methods.forEach((method) => {
    expect(method in lib).toBe(true);
  });

  libKeys.forEach((key) => {
    expect(methods.includes(key)).toBe(true);
  });
});
